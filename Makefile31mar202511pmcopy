.PHONY: setup dev-setup start stop clean test migrate init-db check-deps check-venv check-db setup-python

# System dependencies versions
PYTHON_VERSION := 3.11
VENV_NAME := .venv

# Check system dependencies
check-deps:
	@which python$(PYTHON_VERSION) > /dev/null || (echo "Python $(PYTHON_VERSION) is not installed. Please install it first."; exit 1)

# Ensure Python 3.11 is installed and linked
setup-python:
	@echo "Setting up Python $(PYTHON_VERSION)..."
	python$(PYTHON_VERSION) --version || (echo "Python $(PYTHON_VERSION) is not installed. Please install it first."; exit 1)

# Check if virtual environment exists
check-venv:
	@if [ ! -d "$(VENV_NAME)" ]; then \
		echo "Virtual environment not found. Run 'make setup' first."; \
		exit 1; \
	fi

# Check if database exists
check-db:
	@echo "Checking if database 'supplychain_db' exists..."
	@if ! psql -lqt | cut -d \| -f 1 | grep -qw supplychain_db; then \
		echo "Database 'supplychain_db' does not exist. Run 'make init-db' to create it."; \
		exit 1; \
	else \
		echo "Database 'supplychain_db' exists."; \
	fi

# Python packages with specific versions
BASE_REQUIREMENTS := \
	python-dotenv==1.0.0 \
	fastapi==0.104.1 \
	uvicorn==0.24.0 \
	sqlalchemy==2.0.23 \
	alembic==1.12.1 \
	psycopg2-binary==2.9.9 \
	pydantic==2.8.0 \
	pydantic[email]==2.8.0 \
	python-multipart==0.0.6 \
	requests==2.31.0 \
	httpx==0.28.1

DEV_REQUIREMENTS := \
	coverage==6.5.0 \
	pytest==7.4.3 \
	pytest-cov==4.1.0 \
	black==23.10.1 \
	flake8==6.1.0 \
	httpx==0.28.1

# System packages setup
setup: check-deps setup-python
	@echo "Setting up the environment..."
	python$(PYTHON_VERSION) -m venv $(VENV_NAME)
	. $(VENV_NAME)/bin/activate && pip3 install --upgrade pip wheel setuptools
	. $(VENV_NAME)/bin/activate && PYTHONPATH=$(PWD) pip3 install $(BASE_REQUIREMENTS)
	$(MAKE) check-db  # Check if the database exists and initialize if necessary
	$(MAKE) migrate   # Run migrations after setup
	@echo "Environment setup complete."
	@echo "To activate the virtual environment, run: source $(VENV_NAME)/bin/activate"
	@echo "To start the application, run: make start"

# Development environment setup
dev-setup: setup
	@echo "Setting up the development environment..."
	. $(VENV_NAME)/bin/activate && pip3 install $(DEV_REQUIREMENTS)

# Database initialization
init-db:
	@echo "Initializing the database..."
	createdb supplychain_db || true
	test -f alembic.ini || (. $(VENV_NAME)/bin/activate && alembic init migrations)
	. $(VENV_NAME)/bin/activate && alembic upgrade head

# Start application
start: check-venv
	@echo "Starting the application..."
	. $(VENV_NAME)/bin/activate && python src/main.py

# Stop services
stop:
	@echo "Stopping services..."
	@echo "No services to stop. Ensure your database is managed externally."

# Clean environment
clean:
	@echo "Cleaning the environment..."
	rm -rf $(VENV_NAME)


# Run tests
test: dev-setup
	@echo "Running tests..."
	PYTHONPATH=$(PWD) . $(VENV_NAME)/bin/activate  && pytest

# Database migrations
migrate: check-venv
	@echo "Running database migrations..."
	PYTHONPATH=$(PWD) . $(VENV_NAME)/bin/activate && alembic upgrade head