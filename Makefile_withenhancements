.PHONY: setup dev-setup start stop clean test migrate init-db check-deps check-venv check-db setup-python



# System dependencies versions
PYTHON_VERSION := 3.11
PG_VERSION := 14
VENV_NAME := .venv

# Check system dependencies
check-deps:
	@which brew > /dev/null || (echo "Installing Homebrew..." && /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")
	@which rustc > /dev/null || (echo "Installing Rust..." && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh)
	@source "$$HOME/.cargo/env" || true

# Ensure Python 3.11 is installed and linked
setup-python:
	@echo "Setting up Python $(PYTHON_VERSION)..."
	@brew update
	@brew reinstall python@$(PYTHON_VERSION)
	@brew upgrade 
	@brew link python@$(PYTHON_VERSION)
	@brew upgrade 

# Check if virtual environment exists
check-venv:
	@if [ ! -d "$(VENV_NAME)" ]; then \
		echo "Virtual environment not found. Run 'make setup' first."; \
		exit 1; \
	fi
# Check if database exists
check-db:
	@echo "Checking if database 'supplychain_db' exists..."
	@if ! psql -lqt | cut -d \| -f 1 | grep -qw supplychain_db; then \
		echo "Database 'supplychain_db' does not exist. Running 'make init-db'..."; \
		$(MAKE) init-db; \
	else \
		echo "Database 'supplychain_db' exists."; \
	fi

# Python packages with specific versions
BASE_REQUIREMENTS := \
	python-dotenv==1.0.0 \
	fastapi==0.104.1 \
	uvicorn==0.24.0 \
	sqlalchemy==2.0.23 \
	alembic==1.12.1 \
	psycopg2-binary==2.9.9 \
	pydantic[email]==2.4.2 \
	email-validator==2.1.0 \
	python-multipart==0.0.6 \
	requests==2.31.0

DEV_REQUIREMENTS := \
	pytest==7.4.3 \
	pytest-cov==4.1.0 \
	black==23.10.1 \
	flake8==6.1.0 \
	unittest==3.8.0 \
	coverage==6.5.0

# System packages setup
setup: check-deps setup-python
	@echo "Setting up the environment..."
	python$(PYTHON_VERSION) -m venv $(VENV_NAME)
	@if [ ! -d "$(VENV_NAME)" ]; then \
		echo "Error: Virtual environment was not created. Exiting."; \
		exit 1; \
	fi
	@echo "Installing Python dependencies..."
	@if [ ! -f "$(VENV_NAME)/bin/pip" ]; then \
		echo "pip not found. Installing pip manually..."; \
		curl -sSL https://bootstrap.pypa.io/get-pip.py | . $(VENV_NAME)/bin/python; \
	fi
	. $(VENV_NAME)/bin/activate && pip install --upgrade pip wheel setuptools
	. $(VENV_NAME)/bin/activate && PYTHONPATH=$(PWD) pip install $(BASE_REQUIREMENTS)
	brew services start postgresql@$(PG_VERSION)
	$(MAKE) check-db  # Check if the database exists and initialize if necessary
	$(MAKE) migrate   # Run migrations after setup
	@echo "Environment setup complete."
	@echo "To activate the virtual environment, run: source $(VENV_NAME)/bin/activate"
	@echo "To start the application, run: make start"

# Development environment setup
dev-setup: setup
	@echo "Setting up the development environment..."
	. $(VENV_NAME)/bin/activate && pip install $(DEV_REQUIREMENTS)

# Database initialization
init-db:
	@echo "Initializing the database..."
	brew services start postgresql@$(PG_VERSION)
	createdb supplychain_db || true
	test -f alembic.ini || (. $(VENV_NAME)/bin/activate && alembic init migrations)
	. $(VENV_NAME)/bin/activate && alembic upgrade head

# Start application
start: check-venv
	@echo "Starting the application..."
	. $(VENV_NAME)/bin/activate && python src/main.py

# Stop services
stop:
	@echo "Stopping services..."
	brew services stop postgresql@$(PG_VERSION)

# Clean environment
clean:
	@echo "Cleaning the environment..."
	brew services stop postgresql@$(PG_VERSION) || true
	deactivate 2>/dev/null || true
	rm -rf $(VENV_NAME)
	find . -type d -name __pycache__ -exec rm -r {} +

# Run tests
test:
	@echo "Running tests..."
	. $(VENV_NAME)/bin/activate && pytest

# Database migrations
migrate: check-venv
	@echo "Running database migrations..."
	PYTHONPATH=$(PWD) . $(VENV_NAME)/bin/activate && alembic upgrade head
